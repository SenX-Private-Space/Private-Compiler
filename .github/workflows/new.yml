name: FusionX-Final_ALL-IN-ONE

on:
  pull_request:
  workflow_dispatch:
    inputs:
      BUILD_TITLE:
        description: 'Custom Build Title'
        required: false
      KERNEL_TREE_1:
        description: 'Kernel Tree'
        default: 'https://github.com/SenX-Private-Space/fx-tst'
        required: true
      KERNEL_TREE_BRANCH_1:
        description: 'Kernel Tree Branch (SUSFS)'
        default: 'wip-susfs'
        required: false
        type: choice
        options:
          - stable-susfs
          - wip-susfs
      KERNEL_TREE_BRANCH_2:
        description: 'Kernel Tree Branch (NEXT)'
        default: 'wip-next'
        required: false
        type: choice
        options:
          - stable-next
          - wip-next
      KERNEL_TREE_BRANCH_3:
        description: 'Kernel Tree Branch (NOKSU)'
        default: 'fx-base'
        required: false
        type: choice
        options:
          - fx-base
          - stable-noksu
      VERSION:
        description: 'Zip Version'
        default: '2.x'
        required: false
      ANYKERNEL_URL:
        description: 'AnyKernel Url (leave blank if you dont want AnyKernel)'
        default: 'https://github.com/SenseiiX/AnyKernel3'
        required: false
      CUSTOM_SED:
        description: 'Custom Kernel Version'
        default: '-FusionX'
        required: false
      CLANG_TOOLCHAIN:
        description: 'Clang toolchain selection'
        default: 'aosp'
        required: true
        type: choice
        options:
        - neutron
        - aosp clang
      USE_LTO_THIN:
        description: 'Use LTO THIN instead of FULL'
        default: 'false'
        required: false
        type: boolean

jobs:
  build:
    strategy:
      matrix:
        kernel: [1, 2, 3, 4, 5, 6]
        branch: [1, 2, 3]  # 1=SUSFS, 2=NEXT, 3=NOKSU
    runs-on: ubuntu-latest
    env:
      UPLOAD_TO_RELEASE: false

    steps:
      - name: Install Dependencies
        run: sudo apt install flex libncurses6

      - name: Cache Clang Toolchain
        id: cache-clang
        uses: actions/cache@v4
        with:
          path: |
            clang-neutron
            clang-aosp
          key: clang-toolchain-${{ github.event.inputs.CLANG_TOOLCHAIN }}-${{ hashFiles('**/clang-version') }}
          restore-keys: |
            clang-toolchain-${{ github.event.inputs.CLANG_TOOLCHAIN }}-

      - name: Download & Extract Clang (If not cached)
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
            wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
            mkdir -p clang-aosp
            tar -xf clang.tar.gz -C clang-aosp
            echo "aosp-r547379" > clang-version
          else
            wget https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/10032024/neutron-clang-10032024.tar.zst -O clang.tar.zst
            mkdir -p clang-neutron
            unzstd -d clang.tar.zst
            tar -xf clang.tar -C clang-neutron
            echo "neutron-10032024" > clang-version
          fi

      - name: Set Clang Path
        run: |
          if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
            echo "CLANG_PATH=$(pwd)/clang-aosp/bin" >> $GITHUB_ENV
          else
            echo "CLANG_PATH=$(pwd)/clang-neutron/bin" >> $GITHUB_ENV
          fi

      - name: Set Kernel Environment Variables
        run: |
          echo "KERNEL_TREE=${{ github.event.inputs.KERNEL_TREE_1 }}" >> $GITHUB_ENV
          case "${{ matrix.branch }}" in
            1) echo "KERNEL_TREE_BRANCH=${{ github.event.inputs.KERNEL_TREE_BRANCH_1 }}" >> $GITHUB_ENV
               echo "BRANCH_NAME=SUSFS" >> $GITHUB_ENV ;;
            2) echo "KERNEL_TREE_BRANCH=${{ github.event.inputs.KERNEL_TREE_BRANCH_2 }}" >> $GITHUB_ENV
               echo "BRANCH_NAME=NEXT" >> $GITHUB_ENV ;;
            3) echo "KERNEL_TREE_BRANCH=${{ github.event.inputs.KERNEL_TREE_BRANCH_3 }}" >> $GITHUB_ENV
               echo "BRANCH_NAME=NOKSU" >> $GITHUB_ENV ;;
          esac

      - name: Checkout Kernel
        run: |
          git clone --depth=1 --branch "${{ env.KERNEL_TREE_BRANCH }}" "${{ env.KERNEL_TREE }}" kernel_tree

      - name: Kernel Version
        run: |
          cd kernel_tree
          if [[ "${{ github.event.inputs.CUSTOM_SED }}" != "-FusionX" ]]; then
            sed -i -e 's/CONFIG_LOCALVERSION="-FusionX"/CONFIG_LOCALVERSION="${{ github.event.inputs.CUSTOM_SED }}"/' arch/arm64/configs/vendor/munch_defconfig
          fi

      - name: Change LTO Configuration to THIN
        if: ${{ github.event.inputs.USE_LTO_THIN == 'true' }}
        run: |
          cd kernel_tree
          echo "Changing LTO configuration from FULL to THIN..."
          sed -i -e '
          /CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y/c\CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y
          /CONFIG_HAS_LTO_CLANG=y/c\CONFIG_HAS_LTO_CLANG=y
          /# CONFIG_LTO_NONE is not set/c\# CONFIG_LTO_NONE is not set
          /CONFIG_LTO_CLANG_FULL=y/c\# CONFIG_LTO_CLANG_FULL is not set
          /# CONFIG_LTO_CLANG_THIN is not set/c\CONFIG_LTO_CLANG_THIN=y
          ' arch/arm64/configs/vendor/munch_defconfig

      - name: Remove cycle count
        run: |
          cd kernel_tree
          sed -i '/case POWER_SUPPLY_PROP_CYCLE_COUNT:/,/break;/c\
          \tcase POWER_SUPPLY_PROP_CYCLE_COUNT:\
          \t#ifdef CONFIG_BATT_VERIFY_BY_DS28E16\
          \t\tpval->intval = fg->maxim_cycle_count;\
          \t#else\
          \t\trc = get_cycle_count(chip->counter, &pval->intval);\
          \t#endif\
          \t\tbreak;' drivers/power/supply/qcom/qpnp-fg-gen4.c

      - name: Apply Modifications (if swift build)
        if: matrix.kernel == 5 || matrix.kernel == 6
        run: |
          cd kernel_tree
          sed -i -e '/<2841600>,/c\<2841600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<3187200>;/d' arch/arm64/boot/dts/vendor/qcom/kona.dtsi

      - name: Revert to stock gpufreq
        if: matrix.kernel == 3 || matrix.kernel == 4 || matrix.kernel == 6
        run: |
          cd kernel_tree
          patch -p1 -f < "0001-stock-gpu-freq.patch"

      - name: Apply Patches (SUSFS and NEXT only)
        if: matrix.branch != 3
        run: |
          cd kernel_tree
          bash nextpatch.sh

      - name: Apply Modifications (if modified build)
        if: matrix.kernel == 2 || matrix.kernel == 4
        run: |
          cd kernel_tree
          sed -i -e '/<2553600>,/c\<2553600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<2649600>,/c\//<2649600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<2745600>,/c\//<2745600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<2841600>,/c\//<2841600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<3187200>;/c\//<3187200>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e 's/qcom,mdss-pan-physical-width-dimension = <70>;/qcom,mdss-pan-physical-width-dimension = <695>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
          sed -i -e 's/qcom,mdss-pan-physical-height-dimension = <155>;/qcom,mdss-pan-physical-height-dimension = <1546>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi

      - name: Build Kernel
        run: |
          export PATH="${{ env.CLANG_PATH }}:$PATH"
          export ARCH=arm64
          export SUBARCH=ARM64
          export KBUILD_BUILD_USER="senx"
          export KBUILD_BUILD_HOST="ubuntu"
          export KBUILD_BUILD_TIMESTAMP="$(TZ=UTC-7 date)"
          cd kernel_tree
          make O=out vendor/munch_defconfig
          make O=out CC=clang -j$(nproc --all) CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1
          if [[ "${{ matrix.kernel }}" == 1 ]]; then
            cp out/arch/arm64/boot/Image ../Image
            mv out/arch/arm64/boot/dtbo.img ../munch-aosp-dtbo.img
            mv out/arch/arm64/boot/dtb.img ../munch-normal-dtb
          elif [[ "${{ matrix.kernel }}" == 2 ]]; then
            mv out/arch/arm64/boot/dtbo.img ../munch-miui-dtbo.img
            mv out/arch/arm64/boot/dtb.img ../munch-effcpu-dtb
          elif [[ "${{ matrix.kernel }}" == 3 ]]; then
            mv out/arch/arm64/boot/dtb.img ../munch-normal-gpustk-dtb
          elif [[ "${{ matrix.kernel }}" == 4 ]]; then
            mv out/arch/arm64/boot/dtb.img ../munch-effcpu-gpustk-dtb
          elif [[ "${{ matrix.kernel }}" == 5 ]]; then
            mv out/arch/arm64/boot/dtb.img ../munch-slightuc-dtb
          elif [[ "${{ matrix.kernel }}" == 6 ]]; then
            mv out/arch/arm64/boot/dtb.img ../munch-slightuc-gpustk-dtb
          fi

      # Upload Image separately (shared across all kernels for each branch)
      - name: Upload Kernel Base Image
        uses: actions/upload-artifact@v4
        if: matrix.kernel == 1
        with:
          name: kernel-${{ matrix.branch }}-base
          path: Image

      # Upload kernel-specific artifacts
      - name: Upload Kernel Artifacts - Kernel 1
        uses: actions/upload-artifact@v4
        if: matrix.kernel == 1
        with:
          name: kernel-part-${{ matrix.branch }}-1-addon
          path: |
            munch-aosp-dtbo.img
            munch-normal-dtb

      - name: Upload Kernel Artifacts - Kernel 2
        uses: actions/upload-artifact@v4
        if: matrix.kernel == 2
        with:
          name: kernel-part-${{ matrix.branch }}-2-addon
          path: |
            munch-miui-dtbo.img
            munch-effcpu-dtb

      - name: Upload Kernel Artifacts - Kernel 3
        uses: actions/upload-artifact@v4
        if: matrix.kernel == 3
        with:
          name: kernel-part-${{ matrix.branch }}-3-addon
          path: |
            munch-normal-gpustk-dtb

      - name: Upload Kernel Artifacts - Kernel 4
        uses: actions/upload-artifact@v4
        if: matrix.kernel == 4
        with:
          name: kernel-part-${{ matrix.branch }}-4-addon
          path: |
            munch-effcpu-gpustk-dtb

      - name: Upload Kernel Artifacts - Kernel 5
        uses: actions/upload-artifact@v4
        if: matrix.kernel == 5
        with:
          name: kernel-part-${{ matrix.branch }}-5-addon
          path: |
            munch-slightuc-dtb

      - name: Upload Kernel Artifacts - Kernel 6
        uses: actions/upload-artifact@v4
        if: matrix.kernel == 6
        with:
          name: kernel-part-${{ matrix.branch }}-6-addon
          path: |
            munch-slightuc-gpustk-dtb

  package_anykernel:
    needs: build
    strategy:
      matrix:
        branch: [1, 2, 3]  # 1=SUSFS, 2=NEXT, 3=NOKSU
    runs-on: ubuntu-latest

    steps:
      - name: Download Kernel Base Image
        uses: actions/download-artifact@v4
        with:
          name: kernel-${{ matrix.branch }}-base
          path: kernel-${{ matrix.branch }}-base

      - name: Download Kernel Build Addon 1
        uses: actions/download-artifact@v4
        with:
          name: kernel-part-${{ matrix.branch }}-1-addon
          path: kernel-part-${{ matrix.branch }}-1-addon

      - name: Download Kernel Build Addon 2
        uses: actions/download-artifact@v4
        with:
          name: kernel-part-${{ matrix.branch }}-2-addon
          path: kernel-part-${{ matrix.branch }}-2-addon

      - name: Download Kernel Build Addon 3
        uses: actions/download-artifact@v4
        with:
          name: kernel-part-${{ matrix.branch }}-3-addon
          path: kernel-part-${{ matrix.branch }}-3-addon

      - name: Download Kernel Build Addon 4
        uses: actions/download-artifact@v4
        with:
          name: kernel-part-${{ matrix.branch }}-4-addon
          path: kernel-part-${{ matrix.branch }}-4-addon

      - name: Download Kernel Build Addon 5
        uses: actions/download-artifact@v4
        with:
          name: kernel-part-${{ matrix.branch }}-5-addon
          path: kernel-part-${{ matrix.branch }}-5-addon

      - name: Download Kernel Build Addon 6
        uses: actions/download-artifact@v4
        with:
          name: kernel-part-${{ matrix.branch }}-6-addon
          path: kernel-part-${{ matrix.branch }}-6-addon

      - name: Clone AnyKernel3
        run: git clone --recursive --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} -b fusionX AnyKernel3-${{ matrix.branch }}

      - name: Move Kernel Files to AnyKernel3
        run: |
          mv kernel-${{ matrix.branch }}-base/* AnyKernel3-${{ matrix.branch }}/
          mv kernel-part-${{ matrix.branch }}-1-addon/* AnyKernel3-${{ matrix.branch }}/
          mv kernel-part-${{ matrix.branch }}-2-addon/* AnyKernel3-${{ matrix.branch }}/
          mv kernel-part-${{ matrix.branch }}-3-addon/* AnyKernel3-${{ matrix.branch }}/
          mv kernel-part-${{ matrix.branch }}-4-addon/* AnyKernel3-${{ matrix.branch }}/
          mv kernel-part-${{ matrix.branch }}-5-addon/* AnyKernel3-${{ matrix.branch }}/
          mv kernel-part-${{ matrix.branch }}-6-addon/* AnyKernel3-${{ matrix.branch }}/

      - name: Define ZIP Name
        run: |
          COMPILED_DATE=$(date +%Y%m%d)
          case "${{ matrix.branch }}" in
            1) echo "ZIP_NAME=FusionX-SUSFS-${{ github.event.inputs.VERSION }}-$COMPILED_DATE" >> $GITHUB_ENV
               echo "KERNEL_TYPE=SUSFS" >> $GITHUB_ENV ;;
            2) echo "ZIP_NAME=FusionX-NEXT-${{ github.event.inputs.VERSION }}-$COMPILED_DATE" >> $GITHUB_ENV
               echo "KERNEL_TYPE=NEXT" >> $GITHUB_ENV ;;
            3) echo "ZIP_NAME=FusionX-NOKSU-${{ github.event.inputs.VERSION }}-$COMPILED_DATE" >> $GITHUB_ENV
               echo "KERNEL_TYPE=NOKSU" >> $GITHUB_ENV ;;
          esac

      - name: Create ZIP file
        run: |
          cd AnyKernel3-${{ matrix.branch }}
          zip -r9 ../${{ env.ZIP_NAME }}.zip * -x .git* .github*

      - name: Upload Flashable Kernel Zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}.zip

  telegram_notification:
    needs: package_anykernel
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all ZIP artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Send Telegram notifications
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CLANG_TOOLCHAIN: ${{ github.event.inputs.CLANG_TOOLCHAIN }}
          LTO_CONFIG: ${{ github.event.inputs.USE_LTO_THIN }}
          KERNEL_TREE_BRANCH_1: ${{ github.event.inputs.KERNEL_TREE_BRANCH_1 }}
          KERNEL_TREE_BRANCH_2: ${{ github.event.inputs.KERNEL_TREE_BRANCH_2 }}
          KERNEL_TREE_BRANCH_3: ${{ github.event.inputs.KERNEL_TREE_BRANCH_3 }}
        run: |
          # Create Python script to send Telegram messages
          cat > send_telegram.py << 'EOF'
          import os
          import requests
          import glob

          def send_telegram_message(bot_token, chat_id, message, file_path=None):
              if file_path:
                  # Send document with caption
                  url = f"https://api.telegram.org/bot{bot_token}/sendDocument"
                  files = {'document': open(file_path, 'rb')}
                  data = {
                      'chat_id': chat_id,
                      'caption': message,
                      'parse_mode': 'HTML'
                  }
                  response = requests.post(url, data=data, files=files)
              else:
                  # Send text message only
                  url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                  data = {
                      'chat_id': chat_id,
                      'text': message,
                      'parse_mode': 'HTML'
                  }
                  response = requests.post(url, data=data)
              
              return response.json()

          # Get environment variables
          bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          clang_toolchain = os.environ.get('CLANG_TOOLCHAIN')
          lto_config = os.environ.get('LTO_CONFIG')
          branch_1 = os.environ.get('KERNEL_TREE_BRANCH_1', 'N/A')
          branch_2 = os.environ.get('KERNEL_TREE_BRANCH_2', 'N/A')
          branch_3 = os.environ.get('KERNEL_TREE_BRANCH_3', 'N/A')

          # Find all ZIP files
          zip_files = glob.glob('artifacts/**/*.zip', recursive=True)
          
          if not zip_files:
              message = "❌ <b>Build Failed!</b>\nNo ZIP files were generated."
              result = send_telegram_message(bot_token, chat_id, message)
              print(result)
              exit(1)

          # Send build completion message
          completion_message = f"""
           ✅ <b>FusionX Kernel Build Complete!</b>

           <b>Generated Files:</b> {len(zip_files)}
           <b>Clang:</b> {clang_toolchain}
           <b>LTO:</b> {'THIN' if lto_config == 'true' else 'FULL'}
          
           <b>Branches:</b>
          - SUSFS: {branch_1}
          - NEXT: {branch_2}
          - NOKSU: {branch_3}

           <b>Files:</b>
          """

          # Send initial completion message
          send_telegram_message(bot_token, chat_id, completion_message)

          # Send each ZIP file separately
          for zip_file in zip_files:
              file_name = os.path.basename(zip_file)
              file_message = f" <b>{file_name}</b>\nReady for download!"
              
              result = send_telegram_message(bot_token, chat_id, file_message, zip_file)
              print(f"Sent {file_name}: {result}")

          EOF

          # Run the Telegram script
          python3 send_telegram.py
