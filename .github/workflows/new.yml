name: FusionX-NEW
 
on:
   pull_request:
   workflow_dispatch:
     inputs:
       KERNEL_TREE_1:
         description: 'Kernel Tree'
         default: 'https://github.com/SenX-Private-Space/fx-tst.git'
         required: true
       KERNEL_TREE_BRANCH_1:
         description: 'Kernel Tree Branch (SUSFS)'
         default: 'wip-susfs'
         required: false
         type: choice
         options:
           - stable-susfs
           - wip-susfs
           - fx-base
       KERNEL_TREE_BRANCH_2:
         description: 'Kernel Tree Branch (NEXT)'
         default: 'wip-next'
         required: false
         type: choice
         options:
           - stable-next
           - wip-next
           - fx-base
       VERSION:
         description: 'Zip Version'
         default: '1.x'
         required: false
       ANYKERNEL_URL:
         description: 'AnyKernel Tree'
         default: 'https://github.com/SenseiiX/AnyKernel3'
         required: false
       ANYKERNEL_BRANCH:
         description: 'AnyKernel Branch'
         default: 'fusionX'
         required: true
       CUSTOM_SED:
         description: 'Custom Kernel Version'
         default: '-FusionX'
         required: false
       USE_LTO_THIN:
         description: 'Use LTO THIN instead of LTO FULL'
         required: false
         type: boolean
         default: false
       CLANG_TOOLCHAIN:
         description: 'Choose which Clang toolchain to use'
         required: false
         type: choice
         options:
           - aosp clang
           - neutron clang
         default: 'aosp clang'
 
jobs:
   determine_build_targets:
     runs-on: ubuntu-latest
     outputs:
       build_kernel_1: ${{ steps.set-targets.outputs.build_kernel_1 }}
       build_kernel_2: ${{ steps.set-targets.outputs.build_kernel_2 }}
     steps:
       - id: set-targets
         run: |
           # Only build NEXT kernel if both are set to fx-base
           if [[ "${{ github.event.inputs.KERNEL_TREE_BRANCH_1 }}" == "fx-base" && "${{ github.event.inputs.KERNEL_TREE_BRANCH_2 }}" == "fx-base" ]]; then
             echo "build_kernel_1=false" >> $GITHUB_OUTPUT
             echo "build_kernel_2=true" >> $GITHUB_OUTPUT
           else
             # Build both kernels for other branch combinations
             echo "build_kernel_1=true" >> $GITHUB_OUTPUT
             echo "build_kernel_2=true" >> $GITHUB_OUTPUT
           fi
           
   build_kernel_1:
     needs: determine_build_targets
     if: needs.determine_build_targets.outputs.build_kernel_1 == 'true'
     strategy:
       matrix:
         type: [original, modified, swift, normal-gpustk, slightuc-gpustk, effcpu-gpustk]
     runs-on: ubuntu-latest
     env:
       UPLOAD_TO_RELEASE: false
       KERNEL_VARIANT: SUSFS
 
     steps:
       - name: Install Dependencies
         run: |
           sudo apt install flex libncurses6
           # Install zstd if using neutron clang
           if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "neutron clang" ]]; then
             sudo apt install zstd
           fi

       - name: Cache Clang toolchain
         uses: actions/cache@v3
         id: cache-clang
         with:
           path: ${{ github.event.inputs.CLANG_TOOLCHAIN == 'aosp clang' && 'clang-aosp' || 'clang-neutron' }}
           key: ${{ github.event.inputs.CLANG_TOOLCHAIN }}-${{ runner.os }}-${{ github.event.inputs.CLANG_TOOLCHAIN == 'aosp clang' && 'r547379' || '10032024-v1' }}
           restore-keys: |
             ${{ github.event.inputs.CLANG_TOOLCHAIN }}-${{ runner.os }}-
             ${{ github.event.inputs.CLANG_TOOLCHAIN }}-

       - name: Download & Extract Clang (If not cached)
         if: steps.cache-clang.outputs.cache-hit != 'true'
         run: |
           if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
             wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
             mkdir -p clang-aosp
             tar -xf clang.tar.gz -C clang-aosp
           else
             wget https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/10032024/neutron-clang-10032024.tar.zst -O clang.tar.zst
             mkdir -p clang-neutron
             unzstd -d clang.tar.zst
             tar -xf clang.tar -C clang-neutron
           fi
           
       - name: Set Kernel Environment Variables
         run: |
           echo "KERNEL_TREE=${{ github.event.inputs.KERNEL_TREE_1 }}" >> $GITHUB_ENV
           echo "KERNEL_TREE_BRANCH=${{ github.event.inputs.KERNEL_TREE_BRANCH_1 }}" >> $GITHUB_ENV
           echo "CLANG_TOOLCHAIN=${{ github.event.inputs.CLANG_TOOLCHAIN }}" >> $GITHUB_ENV
           
       - name: Extract Repository Owner and Name
         id: repo-info
         run: |
           # Extract owner/repo format from the full URL
           if [[ "${{ github.event.inputs.KERNEL_TREE_1 }}" =~ github.com/([^/]+)/([^/]+) ]]; then
             REPO_OWNER="${BASH_REMATCH[1]}"
             REPO_NAME="${BASH_REMATCH[2]}"
             echo "repository=${REPO_OWNER}/${REPO_NAME}" >> $GITHUB_OUTPUT
             echo "Using repository: ${REPO_OWNER}/${REPO_NAME}"
           else
             echo "::error::Invalid GitHub repository URL format"
             exit 1
           fi
           
       - name: Checkout Kernel
         uses: actions/checkout@v4
         with:
           repository: ${{ steps.repo-info.outputs.repository }}
           ref: ${{ github.event.inputs.KERNEL_TREE_BRANCH_1 }}
           path: kernel_tree
           fetch-depth: 1
 
       - name: Kernel Version
         run: |
           cd kernel_tree
           if [[ "${{ github.event.inputs.CUSTOM_SED }}" != "-FusionX" ]]; then
             sed -i -e 's/CONFIG_LOCALVERSION="-FusionX"/CONFIG_LOCALVERSION="${{ github.event.inputs.CUSTOM_SED }}"/' arch/arm64/configs/vendor/munch_defconfig
           fi
           
       - name: Change LTO Configuration to THIN
         if: ${{ github.event.inputs.USE_LTO_THIN == 'true' }}
         run: |
           cd kernel_tree
           echo "Changing LTO configuration from FULL to THIN..."
           sed -i -e '
           /CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y/c\CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y
           /CONFIG_HAS_LTO_CLANG=y/c\CONFIG_HAS_LTO_CLANG=y
           /# CONFIG_LTO_NONE is not set/c\# CONFIG_LTO_NONE is not set
           /CONFIG_LTO_CLANG_FULL=y/c\# CONFIG_LTO_CLANG_FULL is not set
           /# CONFIG_LTO_CLANG_THIN is not set/c\CONFIG_LTO_CLANG_THIN=y
           ' arch/arm64/configs/vendor/munch_defconfig
           
       - name: Apply Patches
         run: |
          cd kernel_tree
          bash nextpatch.sh

       - name: Apply Stock GPU Frequency Patch
         if: matrix.type == 'normal-gpustk' || matrix.type == 'slightuc-gpustk' || matrix.type == 'effcpu-gpustk'
         run: |
           cd kernel_tree
           echo "Applying stock GPU frequency patch for ${{ matrix.type }} build..."
           patch -p1 -f < "0001-stock-gpu-freq.patch"

       - name: Apply Modifications (if swift build)
         if: matrix.type == 'swift'
         run: |
           cd kernel_tree
           sed -i -e '/<2841600>,/c\<2841600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<3187200>;/d' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           
       - name: Apply Modifications (if modified build)
         if: matrix.type == 'modified'
         run: |
           cd kernel_tree
           sed -i -e '/<2553600>,/c\<2553600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2649600>,/c\//<2649600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2745600>,/c\//<2745600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2841600>,/c\//<2841600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<3187200>;/c\//<3187200>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e 's/qcom,mdss-pan-physical-width-dimension = <70>;$/qcom,mdss-pan-physical-width-dimension = <695>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
           sed -i -e 's/qcom,mdss-pan-physical-height-dimension = <155>;$/qcom,mdss-pan-physical-height-dimension = <1546>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi

       - name: Apply Modifications (if slightuc-gpustk build)
         if: matrix.type == 'slightuc-gpustk'
         run: |
           cd kernel_tree
           sed -i -e '/<2841600>,/c\<2841600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<3187200>;/d' arch/arm64/boot/dts/vendor/qcom/kona.dtsi

       - name: Apply Modifications (if effcpu-gpustk build)
         if: matrix.type == 'effcpu-gpustk'
         run: |
           cd kernel_tree
           sed -i -e '/<2553600>,/c\<2553600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2649600>,/c\//<2649600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2745600>,/c\//<2745600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2841600>,/c\//<2841600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<3187200>;/c\//<3187200>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e 's/qcom,mdss-pan-physical-width-dimension = <70>;$/qcom,mdss-pan-physical-width-dimension = <695>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
           sed -i -e 's/qcom,mdss-pan-physical-height-dimension = <155>;$/qcom,mdss-pan-physical-height-dimension = <1546>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
       
       - name: Record build start time
         id: build_start
         run: |
           # Set timezone to PHT (UTC+8) and use 12-hour format with AM/PM
           echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
           echo "start_date=$(TZ=Asia/Manila date +'%b %d, %Y %I:%M %p')" >> $GITHUB_OUTPUT
       
       - name: Build Kernel
         run: |
           if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
             export PATH="$(pwd)/clang-aosp/bin:$PATH"
           else
             export PATH="$(pwd)/clang-neutron/bin:$PATH"
           fi
           export ARCH=arm64
           export SUBARCH=ARM64
           export KBUILD_BUILD_USER="Senseix"
           export KBUILD_BUILD_HOST="Ubuntu"
           cd kernel_tree
           make O=out vendor/munch_defconfig
           make O=out CC=clang -j$(nproc --all) CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1
           
           if [[ "${{ matrix.type }}" == "original" ]]; then
             mv out/arch/arm64/boot/dtbo.img ../munch-aosp-dtbo.img
             mv out/arch/arm64/boot/dtb ../munch-normal-dtb
             cp out/arch/arm64/boot/Image ../Image
           elif [[ "${{ matrix.type }}" == "swift" ]]; then
             mv out/arch/arm64/boot/dtb ../munch-slightuc-dtb
           elif [[ "${{ matrix.type }}" == "modified" ]]; then
             mv out/arch/arm64/boot/dtbo.img ../munch-miui-dtbo.img
             mv out/arch/arm64/boot/dtb ../munch-effcpu-dtb
           elif [[ "${{ matrix.type }}" == "normal-gpustk" ]]; then
             mv out/arch/arm64/boot/dtb ../munch-normal-gpustk-dtb
           elif [[ "${{ matrix.type }}" == "slightuc-gpustk" ]]; then
             mv out/arch/arm64/boot/dtb ../munch-slightuc-gpustk-dtb
           elif [[ "${{ matrix.type }}" == "effcpu-gpustk" ]]; then
             mv out/arch/arm64/boot/dtb ../munch-effcpu-gpustk-dtb
           fi

       - name: Verify build artifacts
         run: |
           if [[ "${{ matrix.type }}" == "original" ]]; then
             ls -la munch-aosp-dtbo.img munch-normal-dtb Image
             if [[ ! -s munch-aosp-dtbo.img || ! -s munch-normal-dtb || ! -s Image ]]; then
               echo "Error: One or more original build artifacts is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "swift" ]]; then
             ls -la munch-slightuc-dtb
             if [[ ! -s munch-slightuc-dtb ]]; then
               echo "Error: Swift DTB is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "modified" ]]; then
             ls -la munch-miui-dtbo.img munch-effcpu-dtb
             if [[ ! -s munch-miui-dtbo.img || ! -s munch-effcpu-dtb ]]; then
               echo "Error: One or more modified build artifacts is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "normal-gpustk" ]]; then
             ls -la munch-normal-gpustk-dtb
             if [[ ! -s munch-normal-gpustk-dtb ]]; then
               echo "Error: Normal GPU Stock DTB is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "slightuc-gpustk" ]]; then
             ls -la munch-slightuc-gpustk-dtb
             if [[ ! -s munch-slightuc-gpustk-dtb ]]; then
               echo "Error: Slight UC GPU Stock DTB is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "effcpu-gpustk" ]]; then
             ls -la munch-effcpu-gpustk-dtb
             if [[ ! -s munch-effcpu-gpustk-dtb ]]; then
               echo "Error: Efficient CPU GPU Stock DTB is missing or empty"
               exit 1
             fi
           fi
           
       - name: Record build end time
         id: build_end
         run: |
           end_time=$(date +%s)
           start_time=${{ steps.build_start.outputs.start_time }}
           build_duration=$((end_time - start_time))
           echo "end_time=$end_time" >> $GITHUB_OUTPUT
           echo "build_duration=$build_duration" >> $GITHUB_OUTPUT
       
       - name: Upload Kernel Artifacts
         uses: actions/upload-artifact@v4
         with:
           name: kernel-1-${{ matrix.type }}
           path: |
             munch-aosp-dtbo.img
             munch-miui-dtbo.img
             munch-normal-dtb
             munch-slightuc-dtb
             munch-effcpu-dtb
             munch-normal-gpustk-dtb
             munch-slightuc-gpustk-dtb
             munch-effcpu-gpustk-dtb
             Image
             
       - name: Save build metrics
         if: matrix.type == 'original'
         run: |
           mkdir -p /tmp/build-metrics
           echo "${{ steps.build_start.outputs.start_date }}" > /tmp/build-metrics/start-date-1
           echo "${{ steps.build_end.outputs.build_duration }}" > /tmp/build-metrics/duration-1

           if [[ "${{ github.event.inputs.USE_LTO_THIN }}" == "true" ]]; then
             echo "LTO: THIN" > /tmp/build-metrics/lto-config-1
           else
             echo "LTO: FULL" > /tmp/build-metrics/lto-config-1
           fi
           # Save Clang toolchain information
           echo "CLANG: ${{ github.event.inputs.CLANG_TOOLCHAIN }}" >> /tmp/build-metrics/lto-config-1
       
       - name: Upload build metrics
         if: matrix.type == 'original'
         uses: actions/upload-artifact@v4
         with:
           name: build-metrics-1
           path: /tmp/build-metrics/

   build_kernel_2:
     needs: determine_build_targets
     if: needs.determine_build_targets.outputs.build_kernel_2 == 'true'
     strategy:
       matrix:
         type: [original, modified, swift, normal-gpustk, slightuc-gpustk, effcpu-gpustk]
     runs-on: ubuntu-latest
     env:
       UPLOAD_TO_RELEASE: false
       KERNEL_VARIANT: NEXT
 
     steps:
       - name: Install Dependencies
         run: |
           sudo apt install flex libncurses6
           # Install zstd if using neutron clang
           if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "neutron clang" ]]; then
             sudo apt install zstd
           fi
 
       - name: Cache Clang toolchain
         uses: actions/cache@v3
         id: cache-clang
         with:
           path: ${{ github.event.inputs.CLANG_TOOLCHAIN == 'aosp clang' && 'clang-aosp' || 'clang-neutron' }}
           key: ${{ github.event.inputs.CLANG_TOOLCHAIN }}-${{ runner.os }}-${{ github.event.inputs.CLANG_TOOLCHAIN == 'aosp clang' && 'r547379' || '10032024-v1' }}
           restore-keys: |
             ${{ github.event.inputs.CLANG_TOOLCHAIN }}-${{ runner.os }}-
             ${{ github.event.inputs.CLANG_TOOLCHAIN }}-

       - name: Download & Extract Clang (If not cached)
         if: steps.cache-clang.outputs.cache-hit != 'true'
         run: |
           if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
             wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
             mkdir -p clang-aosp
             tar -xf clang.tar.gz -C clang-aosp
           else
             wget https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/10032024/neutron-clang-10032024.tar.zst -O clang.tar.zst
             mkdir -p clang-neutron
             unzstd -d clang.tar.zst
             tar -xf clang.tar -C clang-neutron
           fi
           
       - name: Set Kernel Environment Variables
         run: |
           echo "KERNEL_TREE=${{ github.event.inputs.KERNEL_TREE_1 }}" >> $GITHUB_ENV
           echo "KERNEL_TREE_BRANCH=${{ github.event.inputs.KERNEL_TREE_BRANCH_2 }}" >> $GITHUB_ENV
           echo "CLANG_TOOLCHAIN=${{ github.event.inputs.CLANG_TOOLCHAIN }}" >> $GITHUB_ENV
           
       - name: Extract Repository Owner and Name
         id: repo-info
         run: |
           # Extract owner/repo format from the full URL
           if [[ "${{ github.event.inputs.KERNEL_TREE_1 }}" =~ github.com/([^/]+)/([^/]+) ]]; then
             REPO_OWNER="${BASH_REMATCH[1]}"
             REPO_NAME="${BASH_REMATCH[2]}"
             echo "repository=${REPO_OWNER}/${REPO_NAME}" >> $GITHUB_OUTPUT
             echo "Using repository: ${REPO_OWNER}/${REPO_NAME}"
           else
             echo "::error::Invalid GitHub repository URL format"
             exit 1
           fi
           
       - name: Checkout Kernel
         uses: actions/checkout@v4
         with:
           repository: ${{ steps.repo-info.outputs.repository }}
           ref: ${{ github.event.inputs.KERNEL_TREE_BRANCH_2 }}
           path: kernel_tree
           fetch-depth: 1
 
       - name: Kernel Version
         run: |
           cd kernel_tree
           if [[ "${{ github.event.inputs.CUSTOM_SED }}" != "-FusionX" ]]; then
             sed -i -e 's/CONFIG_LOCALVERSION="-FusionX"/CONFIG_LOCALVERSION="${{ github.event.inputs.CUSTOM_SED }}"/' arch/arm64/configs/vendor/munch_defconfig
           fi
           
       - name: Change LTO Configuration to THIN
         if: ${{ github.event.inputs.USE_LTO_THIN == 'true' }}
         run: |
           cd kernel_tree
           echo "Changing LTO configuration from FULL to THIN..."
           sed -i -e '
           /CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y/c\CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y
           /CONFIG_HAS_LTO_CLANG=y/c\CONFIG_HAS_LTO_CLANG=y
           /# CONFIG_LTO_NONE is not set/c\# CONFIG_LTO_NONE is not set
           /CONFIG_LTO_CLANG_FULL=y/c\# CONFIG_LTO_CLANG_FULL is not set
           /# CONFIG_LTO_CLANG_THIN is not set/c\CONFIG_LTO_CLANG_THIN=y
           ' arch/arm64/configs/vendor/munch_defconfig
           
       - name: Apply Patches
         run: |
          cd kernel_tree
          bash nextpatch.sh

       - name: Apply Stock GPU Frequency Patch
         if: matrix.type == 'normal-gpustk' || matrix.type == 'slightuc-gpustk' || matrix.type == 'effcpu-gpustk'
         run: |
           cd kernel_tree
           echo "Applying stock GPU frequency patch for ${{ matrix.type }} build..."
           patch -p1 -f < "0001-stock-gpu-freq.patch"

       - name: Apply Modifications (if swift build)
         if: matrix.type == 'swift'
         run: |
           cd kernel_tree
           sed -i -e '/<2841600>,/c\<2841600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<3187200>;/d' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           
       - name: Apply Modifications (if modified build)
         if: matrix.type == 'modified'
         run: |
           cd kernel_tree
           sed -i -e '/<2553600>,/c\<2553600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2649600>,/c\//<2649600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2745600>,/c\//<2745600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2841600>,/c\//<2841600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<3187200>;/c\//<3187200>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e 's/qcom,mdss-pan-physical-width-dimension = <70>;$/qcom,mdss-pan-physical-width-dimension = <695>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
           sed -i -e 's/qcom,mdss-pan-physical-height-dimension = <155>;$/qcom,mdss-pan-physical-height-dimension = <1546>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi

       - name: Apply Modifications (if slightuc-gpustk build)
         if: matrix.type == 'slightuc-gpustk'
         run: |
           cd kernel_tree
           sed -i -e '/<2841600>,/c\<2841600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<3187200>;/d' arch/arm64/boot/dts/vendor/qcom/kona.dtsi

       - name: Apply Modifications (if effcpu-gpustk build)
         if: matrix.type == 'effcpu-gpustk'
         run: |
           cd kernel_tree
           sed -i -e '/<2553600>,/c\<2553600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2649600>,/c\//<2649600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2745600>,/c\//<2745600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<2841600>,/c\//<2841600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e '/<3187200>;/c\//<3187200>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i -e 's/qcom,mdss-pan-physical-width-dimension = <70>;$/qcom,mdss-pan-physical-width-dimension = <695>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
           sed -i -e 's/qcom,mdss-pan-physical-height-dimension = <155>;$/qcom,mdss-pan-physical-height-dimension = <1546>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi

       - name: Record build start time
         id: build_start
         run: |
           # Set timezone to PHT (UTC+8) and use 12-hour format with AM/PM
           echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
           echo "start_date=$(TZ=Asia/Manila date +'%b %d, %Y %I:%M %p')" >> $GITHUB_OUTPUT
       
       - name: Build Kernel
         run: |
           if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
             export PATH="$(pwd)/clang-aosp/bin:$PATH"
           else
             export PATH="$(pwd)/clang-neutron/bin:$PATH"
           fi
           export ARCH=arm64
           export SUBARCH=ARM64
           export KBUILD_BUILD_USER="Senseix"
           export KBUILD_BUILD_HOST="Ubuntu"
           cd kernel_tree
           make O=out vendor/munch_defconfig
           make O=out CC=clang -j$(nproc --all) CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1
           
           if [[ "${{ matrix.type }}" == "original" ]]; then
             mv out/arch/arm64/boot/dtbo.img ../munch-aosp-dtbo.img
             mv out/arch/arm64/boot/dtb ../munch-normal-dtb
             cp out/arch/arm64/boot/Image ../Image
           elif [[ "${{ matrix.type }}" == "swift" ]]; then
             mv out/arch/arm64/boot/dtb ../munch-slightuc-dtb
           elif [[ "${{ matrix.type }}" == "modified" ]]; then
             mv out/arch/arm64/boot/dtbo.img ../munch-miui-dtbo.img
             mv out/arch/arm64/boot/dtb ../munch-effcpu-dtb
           elif [[ "${{ matrix.type }}" == "normal-gpustk" ]]; then
             mv out/arch/arm64/boot/dtb ../munch-normal-gpustk-dtb
           elif [[ "${{ matrix.type }}" == "slightuc-gpustk" ]]; then
             mv out/arch/arm64/boot/dtb ../munch-slightuc-gpustk-dtb
           elif [[ "${{ matrix.type }}" == "effcpu-gpustk" ]]; then
             mv out/arch/arm64/boot/dtb ../munch-effcpu-gpustk-dtb
           fi

       - name: Verify build artifacts
         run: |
           if [[ "${{ matrix.type }}" == "original" ]]; then
             ls -la munch-aosp-dtbo.img munch-normal-dtb Image
             if [[ ! -s munch-aosp-dtbo.img || ! -s munch-normal-dtb || ! -s Image ]]; then
               echo "Error: One or more original build artifacts is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "swift" ]]; then
             ls -la munch-slightuc-dtb
             if [[ ! -s munch-slightuc-dtb ]]; then
               echo "Error: Swift DTB is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "modified" ]]; then
             ls -la munch-miui-dtbo.img munch-effcpu-dtb
             if [[ ! -s munch-miui-dtbo.img || ! -s munch-effcpu-dtb ]]; then
               echo "Error: One or more modified build artifacts is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "normal-gpustk" ]]; then
             ls -la munch-normal-gpustk-dtb
             if [[ ! -s munch-normal-gpustk-dtb ]]; then
               echo "Error: Normal GPU Stock DTB is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "slightuc-gpustk" ]]; then
             ls -la munch-slightuc-gpustk-dtb
             if [[ ! -s munch-slightuc-gpustk-dtb ]]; then
               echo "Error: Slight UC GPU Stock DTB is missing or empty"
               exit 1
             fi
           elif [[ "${{ matrix.type }}" == "effcpu-gpustk" ]]; then
             ls -la munch-effcpu-gpustk-dtb
             if [[ ! -s munch-effcpu-gpustk-dtb ]]; then
               echo "Error: Efficient CPU GPU Stock DTB is missing or empty"
               exit 1
             fi
           fi
           
       - name: Record build end time
         id: build_end
         run: |
           end_time=$(date +%s)
           start_time=${{ steps.build_start.outputs.start_time }}
           build_duration=$((end_time - start_time))
           echo "end_time=$end_time" >> $GITHUB_OUTPUT
           echo "build_duration=$build_duration" >> $GITHUB_OUTPUT
       
       - name: Upload Kernel Artifacts
         uses: actions/upload-artifact@v4
         with:
           name: kernel-2-${{ matrix.type }}
           path: |
             munch-aosp-dtbo.img
             munch-miui-dtbo.img
             munch-normal-dtb
             munch-slightuc-dtb
             munch-effcpu-dtb
             munch-normal-gpustk-dtb
             munch-slightuc-gpustk-dtb
             munch-effcpu-gpustk-dtb
             Image
             
       - name: Save build metrics
         if: matrix.type == 'original'
         run: |
           mkdir -p /tmp/build-metrics
           echo "${{ steps.build_start.outputs.start_date }}" > /tmp/build-metrics/start-date-2
           echo "${{ steps.build_end.outputs.build_duration }}" > /tmp/build-metrics/duration-2
 
           if [[ "${{ github.event.inputs.USE_LTO_THIN }}" == "true" ]]; then
             echo "LTO: THIN" > /tmp/build-metrics/lto-config-2
           else
             echo "LTO: FULL" > /tmp/build-metrics/lto-config-2
           fi
           # Save Clang toolchain information
           echo "CLANG: ${{ github.event.inputs.CLANG_TOOLCHAIN }}" >> /tmp/build-metrics/lto-config-2
       
       - name: Upload build metrics
         if: matrix.type == 'original'
         uses: actions/upload-artifact@v4
         with:
           name: build-metrics-2
           path: /tmp/build-metrics/
